/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.proto.Empty', null, global)
goog.exportSymbol('proto.proto.User', null, global)
goog.exportSymbol('proto.proto.UserList', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.proto.Empty, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.proto.Empty.displayName = 'proto.proto.Empty'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.proto.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.proto.Empty.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.proto.Empty.toObject = function (includeInstance, msg) {
    var f; var obj = {

    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Empty}
 */
proto.proto.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.proto.Empty()
  return proto.proto.Empty.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Empty}
 */
proto.proto.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.proto.Empty.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.User = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.proto.User, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.proto.User.displayName = 'proto.proto.User'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.proto.User.prototype.toObject = function (opt_includeInstance) {
    return proto.proto.User.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.proto.User.toObject = function (includeInstance, msg) {
    var f; var obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, ''),
      username: jspb.Message.getFieldWithDefault(msg, 2, ''),
      email: jspb.Message.getFieldWithDefault(msg, 3, ''),
      firstname: jspb.Message.getFieldWithDefault(msg, 4, ''),
      lastname: jspb.Message.getFieldWithDefault(msg, 5, '')
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.User}
 */
proto.proto.User.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.proto.User()
  return proto.proto.User.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.User}
 */
proto.proto.User.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setUsername(value)
        break
      case 3:
        var value = /** @type {string} */ (reader.readString())
        msg.setEmail(value)
        break
      case 4:
        var value = /** @type {string} */ (reader.readString())
        msg.setFirstname(value)
        break
      case 5:
        var value = /** @type {string} */ (reader.readString())
        msg.setLastname(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.User.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.proto.User.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.User.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getId()
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    )
  }
  f = message.getUsername()
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    )
  }
  f = message.getEmail()
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    )
  }
  f = message.getFirstname()
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    )
  }
  f = message.getLastname()
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    )
  }
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.User.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.proto.User.prototype.setId = function (value) {
  jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string username = 2;
 * @return {string}
 */
proto.proto.User.prototype.getUsername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/** @param {string} value */
proto.proto.User.prototype.setUsername = function (value) {
  jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string email = 3;
 * @return {string}
 */
proto.proto.User.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''))
}

/** @param {string} value */
proto.proto.User.prototype.setEmail = function (value) {
  jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional string firstName = 4;
 * @return {string}
 */
proto.proto.User.prototype.getFirstname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''))
}

/** @param {string} value */
proto.proto.User.prototype.setFirstname = function (value) {
  jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string lastName = 5;
 * @return {string}
 */
proto.proto.User.prototype.getLastname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/** @param {string} value */
proto.proto.User.prototype.setLastname = function (value) {
  jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UserList = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.UserList.repeatedFields_, null)
}
goog.inherits(proto.proto.UserList, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.proto.UserList.displayName = 'proto.proto.UserList'
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.UserList.repeatedFields_ = [1]

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.proto.UserList.prototype.toObject = function (opt_includeInstance) {
    return proto.proto.UserList.toObject(opt_includeInstance, this)
  }

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UserList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.proto.UserList.toObject = function (includeInstance, msg) {
    var f; var obj = {
      usersList: jspb.Message.toObjectList(msg.getUsersList(),
        proto.proto.User.toObject, includeInstance)
    }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UserList}
 */
proto.proto.UserList.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.proto.UserList()
  return proto.proto.UserList.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UserList}
 */
proto.proto.UserList.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = new proto.proto.User()
        reader.readMessage(value, proto.proto.User.deserializeBinaryFromReader)
        msg.addUsers(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UserList.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter()
  proto.proto.UserList.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UserList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserList.serializeBinaryToWriter = function (message, writer) {
  var f = undefined
  f = message.getUsersList()
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.User.serializeBinaryToWriter
    )
  }
}

/**
 * repeated User users = 1;
 * @return {!Array<!proto.proto.User>}
 */
proto.proto.UserList.prototype.getUsersList = function () {
  return /** @type{!Array<!proto.proto.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.User, 1))
}

/** @param {!Array<!proto.proto.User>} value */
proto.proto.UserList.prototype.setUsersList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value)
}

/**
 * @param {!proto.proto.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.User}
 */
proto.proto.UserList.prototype.addUsers = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.User, opt_index)
}

proto.proto.UserList.prototype.clearUsersList = function () {
  this.setUsersList([])
}

goog.object.extend(exports, proto.proto)
